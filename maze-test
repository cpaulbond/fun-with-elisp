#!/usr/bin/env emacs -script
;;; -*- lexical-binding: t -*-
;;> Simple maze generator.
;;> Example: ./maze-generate 20 20

(add-to-list 'load-path (file-name-directory load-file-name))
(require 'cl-lib)
(require 'maze)


(defun test-reader ()
  (let* ((rows 5)
         (cols 7)
         (file-name "maze.tmp")
         (a (new-maze rows cols))
         b)
  
    (dig-maze a (random rows) (random cols))
    (with-temp-file file-name
      (let ((standard-output (current-buffer)))
        (print-maze a)))

    (clear-maze-visited a)
    (setq b (read-maze file-name))

    (princ (format "(equal a b) %s\n" (equal a b)))
    (dump-maze a)
    (dump-maze b)))

(defun test-solve ()
  (let* ((rows 20)
         (cols 20)
         (file-name "maze.tmp")
         (a (new-maze rows cols))
         b)

    ;; (random "start-there")
    (dig-maze a (random rows) (random cols))
    (clear-maze-visited a)
    (print-maze a (solve-maze a))))


(defun clear-maze-visited (m)
  (let ((rows (1- (maze-rows m)))
        (cols (1- (maze-cols m))))

    (dotimes (r rows)
      (dotimes (c cols)
        (maze-unset m r c 'visited)))))

(defun test-all ()
  (let* ((rows 21)
         (cols 33)
         (file-name "maze.tmp")
         (a (new-maze rows cols))
         b)
  
    (dig-maze a (random rows) (random cols))
    (with-temp-file file-name
      (let ((standard-output (current-buffer)))
        (print-maze a)))

    (clear-maze-visited a)
    (setq b (read-maze file-name))

    (cl-assert (equal a b))

    (print-maze a (solve-maze a))))

(test-all)
    


